<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown 语法手册]]></title>
    <url>%2FMarkdown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C20180429%2F</url>
    <content type="text"><![CDATA[Markdown 是一种轻量级标记语言，能将文本换成有效的XHTML(或者HTML)文档，它的目标是实现易读易写，成为一种适用于网络的书写语言。 Markdown 语法简洁明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的和一些大型CMS，如Joomla!、Drupal等都能很好的支持Markdown。我是因为写GitHub项目库中的Readme才开始接触Markdown。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 Headers 标题：123456# H1## H2### H3#### H4##### H5###### H6 另外，H1和H2还能用以下方式显示：12345一级标题===二级标题---]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题第三方配置 评论 统计等]]></title>
    <url>%2Fnext%E4%B8%BB%E9%A2%98%E7%AC%AC%E4%B8%89%E6%96%B9%E9%85%8D%E7%BD%AE20180428%2F</url>
    <content type="text"><![CDATA[之前的文章讲了next的一般的配置，这次在说下next的第三方配置，比如评论、统计等 评论在多说和网易云跟帖相继倒闭，DISQUS、Facebook Comments、HyperComments不符合国情来必力打开超慢的情况下，选择了 Valine 这个评论系统是基于LeanCloud的，大家应该对这个很熟悉，对，Hexo的博客阅读量统计也是它。官网网址如下，需要注册一个账户。LeanCloud官网 注册后进入控制台后点击左下角创建应用： 应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的appid和appkey了： 为了数据安全，请注意设置自己的安全域名： 配置 主题配置文件修改appid和appkey 如果需要邮件提箱把notify设置为true具体的设置可以看评论系统中的邮件提醒设置 数据统计和分析常用的数据分析next主题都是支持的 百度统计登录 百度统计，定位到站点的代码获取页面 新建站点 百度提供的统计代码:复制 hm.js? 后面那串统计脚本 id，如下图所示： 编辑 主题配置文件， 修改字段 baidu_analytics，值设置成你的百度统计脚本 id。 CNZZ 统计在 主题配置文件 中增加了一项 cnzz_siteid的配置项，值为 CNZZ 里面添加统计的站点ID。 内容分享百度分享编辑 主题配置文件，添加/修改字段 baidushare，值为 true。 站内搜索安装 hexo-generator-searchdb，在站点的根目录下执行以下命令 1$ npm install hexo-generator-searchdb --save]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+七牛云命令工具存储图片]]></title>
    <url>%2Fhexo-%E4%B8%83%E7%89%9B%E4%BA%91%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%8720180428%2F</url>
    <content type="text"><![CDATA[##加入图片的几种方式 Hexo文章中的图片，可以放在本地，然后和静态文件一起发布（部署）到你的空间。将图片放在source/images目录下，然后直接引入比较麻烦，也占用资源，想到后期图片增多的加载速度问题，果断放弃 使用各种图床，如：贴图库,注册个用户,直接上传图片不是很稳定,而且每次都要打开web，然后上传，我是个懒人~~~~ 使用七牛云的命令行工具 首先下载工具：点击这里该工具由于是命令行工具，所以只需要从上面的下载链接下载后即可执行使用（建议重命名为qshell）。但每次都要找到目录打开这个命令行工具有木有很麻烦!~那么配置全局使用吧 增加环境变量，以mac为例，mac系统的环境变量文件有几个，我因为是全局公用的,所以我选择使用~/.bashrc文件 –打开cmd命令行,输入 1vim ~/.bashrc 进入编辑模式,增加1export PATH=$PATH:刚才下载的七牛命令行工具的位置 如果文件中以前有path环境变量,直接 :位置加后面就可以了保存然后执行1$ source ~/.bashrc 验证一下1$ qshell -v 如果成功会显示版本号 设置密钥,ak和sk登录七牛云个人中心-&gt;密钥管理中查看1$ qshell account ak sk 安装完成，开始使用上传图片有几种 1. 上传100MB以下的小文件1$ qshell fput &lt;Bucket&gt; &lt;Key&gt; &lt;LocalFile&gt; [Overwrite] [MimeType] [UpHost] [FileType] 参数名称 描述 默认 Bucket 七牛空间名称 N Key 文件保存在七牛空间的名称 N LocalFile 本地文件的路径 N Overwrite 可选,是否覆盖空间已有文件，默认为false Y MimeType 可选,指定文件的MimeType Y UpHost 可选,上传入口地址 Y FileType 可选,文件存储类型，0(标准存储）1(低频存储) 0 如:上传后,在你的md文件中直接引入就OK了1![](https://p7vioebko.bkt.clouddn.com/a.jpg) 前面是七牛外联域名: 2. 上传文件大小较大的文件1$ qshell rput &lt;Bucket&gt; &lt;Key&gt; &lt;LocalFile&gt; [Overwrite] [MimeType] [UpHost] [FileType] 3. 将本地目录中的文件同步到七牛空间1$ qshell qupload [&lt;ThreadCount&gt;] &lt;LocalUploadConfig&gt; qupload需要本地配置文件的支持,详情请看:点击这里 4. 从互联网上抓取一个资源并保存到七牛的空间中1$ qshell fetch &lt;RemoteResourceUrl&gt; &lt;Bucket&gt; [&lt;Key&gt;] 参数名 描述 可选参数 RemoteResourceUrl 互联网上资源的链接 Bucket 空间名称 N Key 该资源保存在空间中的名字，如果不指定这个名字，那么会使用抓取的资源的内容hash值来作为文件名 Y 适合大文件的:1$ qshell sync &lt;SrcResUrl&gt; &lt;Bucket&gt; &lt;Key&gt; [&lt;UpHostIp&gt;] 5. 查询文件信息1$ qshell stat &lt;Bucket&gt; &lt;Key&gt; 参数名 描述 Bucket 空间名称 Key 空间中的文件名 6. 删除文件1$ qshell delete &lt;Bucket&gt; &lt;Key&gt; 现在再上传图片就很简单了,再也不用本地找个地方保存图片，也不用每次都开web了：）想了解更多的，可以参考官方文档：官方文档]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客之：next主题配置文件详细说明]]></title>
    <url>%2Fnext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE20180427%2F</url>
    <content type="text"><![CDATA[按照上面两篇的文章，一个简单的博客已经搭建好了。下面介绍下主题的配置在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置，为 站点配置文件；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项，为 主题配置文件 hexo下有很多的主题，具体可以看hexo主题,选择自己喜欢的本文是获赞最多的next主题的配置文件说明 安装next主题在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。1theme: next 主题设置完毕 需要修改 站点配置文件 的地方1language: zh-Hans # 语言中文 设置主题下外观目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。123#scheme: Muse#scheme: Mistscheme: Pisces 设置菜单1234567menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html 若你的站点运行在子目录中，请将链接前缀的 / 去掉前面的只是键值，对应的文字在languages/{language}.yml下 配置菜单前的小图标，menu_icons下面，键值与menu中的配置一致，大小写要严格匹配 设置侧栏位置设置侧栏的位置，修改 sidebar.position 的值，目前仅 Pisces Scheme 支持 position 配置12sidebar: position: left 设置侧栏显示的时机，修改 sidebar.display 的值 post - 默认行为，在文章页面（拥有目录列表）时显示always - 在所有页面中都显示hide - 在所有页面中都隐藏（可以手动展开）remove - 完全移除 设置 头像修改字段 avatar， 值设置成头像的链接地址 放置在 source/images/ 目录下 , 配置为：avatar: /images/avatar.png或者是完整的互联网 URI : avatar: https://example.com/avatar.png 设置 代码高亮主题NexT共有5款代码高亮主题。默认使用的是 白色的 normal 主题。可选的值有 normal，night， night blue， night bright， night eighties：更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：1234# Code Highlight theme# Available value: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal 开启侧边栏社交链接12345678# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name 微博: https://weibo.com/your-user-name 豆瓣: https://douban.com/people/your-user-name 知乎: https://www.zhihu.com/people/your-user-name # 等等 开启打赏功能123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image 开启友情链接123links: MacTalk: https://macshuo.com/ Title: https://example.com/ 订阅微信公众号在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。在微信公众号平台下载您的二维码，并将它存放于博客source/uploads/目录下。然后编辑 主题配置文件，如下：1234wechat_subscriber: enabled: true qcode: /uploads/wechat-qcode.jpg description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！ 设置背景动画NexT 自带两种背景动画效果编辑 主题配置文件， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可：1234567# canvas_nestcanvas_nest: true //开启动画canvas_nest: false //关闭动画# three_wavesthree_waves: true //开启动画three_waves: false //关闭动画 设置 阅读全文在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法： 在文章中使用 手动进行截断，Hexo 提供的方式 推荐 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要，在 主题配置文件 中添加：123auto_excerpt: enable: true length: 150 更改内容区域的宽度NexT 对于内容的宽度的设定如下： 700px，当屏幕宽度 &lt; 1600px 900px，当屏幕宽度 &gt;= 1600px 移动设备下，宽度自适应12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px 方法不适用于 Pisces Scheme，Pisces Scheme 的宽度修改如下:在 source/css/_schemes/Picses/_layout.styl 中，同时修改 header 的宽度、.main-inner 的宽度以及 .content-wrap 的宽度123header&#123; width: 90%; &#125;.container .main-inner &#123; width: 90%; &#125;.content-wrap &#123; width: calc(100% - 260px); &#125; 添加 标签 页面新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：12345title: 标签测试文章tags: - Testing - Another Tag--- 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ： 12$ cd your-hexo-site$ hexo new page tags 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 1234title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下: 1234menu: home: / archives: /archives tags: /tags 添加「分类」页面与设置标签页面相同 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ： 12$ cd your-hexo-site$ hexo new page categories 编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下： 1234title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;--- 在菜单中添加链接。编辑 主题配置文件 ， 添加 categories 到 menu 中，如下: 1234menu: home: / archives: /archives categories: /categories 腾讯公益404页面腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/plain&quot; src=&quot;https://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt; &lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 修改文章内链接文本样式修改文件 themes\next\source\css\/_common\components\post\post.styl ，在末尾,@import前添加如下css样式：1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 修改文章底部的那个带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成1&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记 在路径 \themes\next\layout\/_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 123456789&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt; -------------本文结束 &lt;i class=&quot;fa fa-heartbeat&quot;&gt;&lt;/i&gt; 感谢您的阅读------------- &lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\/_macro\post.swig文件，在post-body 之后， post-footer之前添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件 ,在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 网站底部字数统计和时间统计 文字时间统计切换到根目录下，然后运行如下代码 1$ npm install hexo-wordcount --save 然后在/themes/next/layout/_partials/footer.swig文件尾部加上： 1234&lt;div class="theme-info"&gt; &lt;div class="powered-by"&gt;&lt;/div&gt; &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 时间统计在主题的配置文件中，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount:item_text: truewordcount: truemin2read: true 在文章底部增加版权信息在目录next/layout/_macro/下添加my-copyright.swig：1234567891011121314151617181920212223242526272829303132&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script type="text/javascript" src="http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"&gt;&lt;/script&gt; &lt;script src="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" type="text/css" href="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;转载请保留原文链接及作者。&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); clipboard.on('success', $(function()&#123; $(".fa-clipboard").click(function()&#123; swal(&#123; title: "", text: '复制成功', html: false, timer: 500, showConfirmButton: false &#125;); &#125;); &#125;));&lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl：123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码12345&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 之前添加增加如下代码：12345&#123;% if not is_index %&#125; &lt;div&gt; &#123;% include &apos;my-copyright.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：1@import &quot;my-post-copyright&quot; 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：1234567---title:date:tags:categories:copyright: true--- 以上是一些常用的配置 另外next主题的菜单图标显示无效的问题：修改themes/next/layout/_partials 下的 header.swig文件，找到以下代码1&lt;i class=&quot;menu-item-icon fa fa-fw fa-&#123;&#123; path.split(&apos;||&apos;)[1] | trim | default(&apos;question-circle&apos;) &#125;&#125;&quot;&gt;&lt;/i&gt; 改为1&lt;i class=&quot;menu-item-icon fa fa-fw fa-&#123;&#123; theme.menu_icons[name] | default(&apos;question-circle&apos;) &#125;&#125;&quot;&gt;&lt;/i&gt; ##本文参考API next]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客]]></title>
    <url>%2F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A220180426%2F</url>
    <content type="text"><![CDATA[1. 安装git和nodeJs在搭建Hexo之前需要先安装git和nodeJs，直接去官方下载最新版本按照提示安装就好，就不再重复叙述了 2. 正式开始,安装Hexo执行以下命令1$ sudo npm install -g hexo 3. 创建博客安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。123$ hexo init &lt;目录&gt;$ cd &lt;目录&gt;$ npm install 新建完成后，指定文件夹的目录如下 .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 4. 运行执行下面的命令进行文件生成1$ hexo g 运行1$ hexo s 浏览器输入 localhost:4000 到此，hexo博客算是搭建成功了，但是只能在本地看，下一步，我们把它部署到github上 5. 部署到github上 首先我们需要先去github上注册个账号 登陆后新建一个仓库,仓库名称为: 你的帐号.github.io 获得新建仓库的下载地址：SSH或者HTTPS的 修改hexo的配置文件，在站点目录下的_config.yml文件 修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件1234deploy: type: git repository: git@github.com:laayoune/laayoune.github.io.git branch: master 执行命令1$ hexo d 如果报错说没有git那么安装插件1$ npm install hexo-deployer-git --save 后再执行hexo d命令 输入github博客地址:你的帐号.github.io，就可以看到一个简单的博客搭建成功了 注意:如果使用的是SSH提交方式,第一次需要配置git密钥,否则会报错没有权限 查看是否有密钥123$ cd ~/.ssh$ lsauthorized_keys2 id_dsa known_hosts config id_dsa.pub 看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥 如果没有,生成密钥1$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; 执行后会提示输入密码(建议输一个，当然不输也行) 查看你生成的公钥 1$ cat ~/.ssh/id_rsa.pub 登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key 然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字就可以了]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客之：站点配置文件详细说明]]></title>
    <url>%2Fhexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE20180426%2F</url>
    <content type="text"><![CDATA[站点配置可以在 _config.yml 中修改大部份的配置。 网站1234567参数 描述title 网站标题subtitle 网站副标题description 网站描述author 您的名字language 网站使用的语言timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址12345参数 描述 默认值url 网址root 网站根目录permalink 文章的永久链接格式 :year/:month/:day/:title/permalink_defaults 永久链接中各部分的默认值 目录123456789参数 描述source_dir 资源文件夹，这个文件夹用来存放内容。public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir 标签文件夹archive_dir 归档文件夹category_dir 分类文件夹code_dir Include code 文件夹i18n_dir 国际化（i18n）文件夹skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 文章123456789101112参数 描述new_post_name 新文章的文件名称default_layout 预设布局auto_spacing 在中文和英文之间加入空格titlecase 把标题转换为 title caseexternal_link 在新标签中打开链接filename_case 把文件名称转换为 (1) 小写或 (2) 大写render_drafts 显示草稿post_asset_folder 启动 Asset 文件夹relative_link 把链接改为与根目录的相对位址future 显示未来的文章highlight 代码块的设置 分类&amp;标签1234参数 描述 默认值default_category 默认分类 uncategorizedcategory_map 分类别名tag_map 标签别名 时间/日期格式123参数 描述 默认值date_format 日期格式 YYYY-MM-DDtime_format 时间格式 H:mm:ss 分页123参数 描述 默认值per_page 每页显示的文章量 (0 = 关闭分页功能) 10pagination_dir 分页目录 page 扩展123参数 描述theme 当前主题名称。值为false时禁用主题deploy 部署部分的设置 ##完整的站点配置:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Sitetitle: 云的妍色 #网站标题subtitle: 一字一符一世界 #网站副标题description: 码农的日常 #网站描述keywords:author: zhuyt #博主的名字language: zh-Hans #网站使用的语言timezone: #网站时区。Hexo 默认使用您电脑的时区# URL## If your site is put in a subdirectory, set url as &apos;https://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://laayoune.github.io #https://yoursite.comroot: /permalink: :title:year:month:day/ #生成文件名字的格式 :year/:month/:day/:title/permalink_defaults:# Directory 目录配置source_dir: source #源文件夹，这个文件夹用来存放内容。public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #nclude code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新建文章默认文件名default_layout: post # 默认布局titlecase: false # Transform title into titlecaseexternal_link: true # 在新标签中打开一个外部链接，默认为truefilename_case: 0 #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名render_drafts: false #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动 Asset 文件夹relative_link: false #把链接改为与根目录的相对位址，默认falsefuture: true #显示未来的文章，默认falsehighlight: #代码块的设置 enable: true line_number: true auto_detect: false tab_replace:# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date# Category &amp; Tag 分类和标签的设置default_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## https://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 分页## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page #分页目录# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next ## hexo主题## Rssfeed: type: atom #feed 类型 (atom/rss2) path: atom.xml #rss 路径 limit: 20 #在 rss 中最多生成的文章数(0显示所有)# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:laayoune/laayoune.github.io.git branch: master]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android开发环境搭建教程]]></title>
    <url>%2FAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B20150106%2F</url>
    <content type="text"><![CDATA[第一步：安装JDK，并配置JDK环境变量 第二步： 下载安装Eclipse上面两步网上很多就不详述了 第三步：下载安装Android SDK Android SDK提供了开发Android应用程序所需的API库和构建、测试和调试Android应用程序所需的开发工具。 打开http://developer.android.com/sdk/index.html，我们发现google提供了集成了Eclipse的Android Developer Tools，因为我们这次是已经下载了Eclipse，所以我们选择单独下载Android SDK。下载后双击安装，指定Android SDK的安装目录，为了方便使用Android SDK包含的开发工具，我们在系统环境变量中的Path设置Android SDK的安装目录下的tools目录。 在Android SDK的安装目录下，双击“SDK Manager.exe”，打开Android SDK Manager，Android SDK Manage负责下载或更新不同版本的SDK包，我们看到默认安装的Android SDK Manager只安装了一个版本的sdk tools。打开Android SDK Manager，它会获取可安装的sdk版本，但是国内有墙，有时候会出现获取失败的情况。从弹出的log窗口中，我们可以看到连接 “https://dl-ssl.google.com”失败了。我们通过ping命令，发现果然网络不通。 从万能的互联网上，我们找到了解决这个问题的方案，而且行之有效。 更改host文件 首先更改host文件，host文件在C:\Windows\System32\drivers\etc目录下，用记事本打开“hosts”文件，将下面两行信息追加到hosts文件末尾，保存即可。如果你的是windows8系统可能没有权限修改host文件，可以右击hosts文件，将Users组设置为可对hosts文件完全控制的权限即可。 203.208.46.146 dl.google.com 203.208.46.146 dl-ssl.google.com 上面两行放在host文件的意思是将本地访问dl.google.com和dl-ssl.google.com定向到ip地址为203.208.46.146的服务器上。 将Android SDK Manage上的https请求改成http请求 打开Android SDK Manager，在Tools下的 Options 里面，有一项 Force https://..sources to be fetched using http://… 将这一项勾选上，就可以了。 再打开Android SDK Manager.exe，正常情况下就可以下载Android的各个版本的sdk了。你只需要选择想要安装或更新的安装包，点击右下角的Install 18 packages… 安装即可。这里是比较耗时的过程，还会出现下载失败的情况，失败的安装包只需要重新选择后再安装就可以了。 第四步：为Eclipse安装ADT插件 前面我们已经配置好了java的开发环境，安装了开发Android的IDE，下载安装了Android SDK，但是Eclipse还没有和Android SDK进行关联，也就是它们现在是互相独立的。为了使得Android应用的创建，运行和调试更加方便快捷，Android的开发团队专门针对Eclipse IDE定制了一个插件：Android Development Tools（ADT）。 下面是在线安装ADT的方法： 启动Eclipse，点击 Help菜单 -&gt; Install New Software… ?，点击弹出对话框中的Add… 按钮。然后在弹出的对话框中的Location中输入：http://dl-ssl.google.com/android/eclipse/，Name可以输入ADT，点击“OK”按钮。在弹出的对话框选择要安装的工具，然后下一步就可以了。安装好后会要求你重启Eclipse，Eclipse会根据目录的位置智能地和它相同目录下Android sdk进行关联，如果你还没有通过sdk manager工具安装Android任何版本的的sdk，它会提醒立刻安装它们。如果Eclipse没有自动关联Android sdk的安装目录，那么你可以在打开的Eclipse选择 Window -&gt; Preferences ，在弹出面板中就会看到Android设置项，填上安装的SDK路径，则会出现刚才在SDK中安装的各平台包，按OK完成配置。到这里，我们在windows上的Android上的开发环境搭建就完成了，这时候，你用Eclipse的File——》New——》Project…新建一个项目的时候，就会看到建立Android项目的选项了。 第五步：创建AVD模拟器 在命令行输入android avd 或者打开eclipse点击安卓右边那个图标，出现avd设置界面，点击创建按钮进行新建点击OK创建成功 第六步：建立工程 选择合适的Build SDk 配置应用程序Launcher的Icon，这里采用默认设置。选择App Activity类型。这里选择BlackActivity。 定义Activity详细。这里采用默认设置。单击完成。预览。完成后运行改程序，显示结果如下图。 这个过程也会稍微的长点，大概2到3分钟，因为这个模拟器要跑一遍Android系统之后才能安装加载你的应用程序，启动完成后一般都需要模拟器解锁，老的版本你可以按Menu键，新的版本你需要手动滑动屏幕上的解锁键。可以看到我们创建的APP]]></content>
      <categories>
        <category>App</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>App</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web移动应用调试工具——Weinre]]></title>
    <url>%2FWeb%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Weinre20141231%2F</url>
    <content type="text"><![CDATA[如今人们也越来越习惯在手机上浏览网页，而在手机上这些针对桌面浏览器设计的网页经常惨不忍睹。Web应用开发者需要针对手机进行界面的重新设计，但是手机上并没有称心如意的调试工具（如Firebug、web inspector），重新设计界面的工作往往事半功倍。本文介绍的调试工具Weinre 就是解决这一问题的优秀调试工具。 Weinre是什么？Weinre代表We b In spector Re mote，是一种远程调试工具。举个例子，在电脑上可以即时 的更改手机上对应网页的页面元素、样式表，或是查看Javascript变量，同时还可以看到手机上页面的错误和警告信息. 下图所示中的例子，通过在console中运行“document.body.style.backgroundcolor = ‘green’;” 即时改变了手机上网页的背景色。图1: 桌面的debug客户端与手机上的对应页面 使用一种工具之前，了解它的原理和结构是很有帮助的。Weinre作为一种远程调试工具，在结构上分为三层： 目标页面（target）：被调试的页面，页面已嵌入weinre的远程js，下文会介绍；Debug客户端（client）：本地的Web Inspector调试客户端；Debug服务端（agent）：一个HTTP Server，为目标页面与Debug客户端建立通信。三层结构如下图所示：图2：Weinre组成结构 Weinre的debug客户端是基于Web Inspector开发，而Web Inspector只与以WebKit为核心的浏览器兼容，所以Weinre的客户端只能用Chrome或者Safari打开。 运行Weinre准备工作weinre目前支持Windows与MacOS， 本文中以Windows版为例。 Weinre调试需要nodejs的框架支持，需要先安装nodejs平台 Nodejs下载地址：http://nodejs.org/download/ nodejs配置键入命令：npm express 回车等待安装express…….. 键入命令：npm jade 回车等待安装jade…….. 键入命令：npm mysql回车等待安装mysql…….. ……..安装什么组件，取决于环境搭建需求 默认情况下上述组件都是安装在C:\Program Files\nodejs\node_modules文件夹下 这也是nodejs相关组件的自动查找路径 weinre安装1、运行cmd，打开命令提示符。2、将目录转至nodejs安装目录下。3、键入命令：1npm -g install weinre 回车等待安装weinre。 安装完成 4、键入命令：1weinre -httpPort 8008 -boundHost -all- 回车等待启动weinre 端口号随意，只要不被占用 这行命令在本机启动了weinre的Debug服务端，端口为8008。打开Chrome或Safari，访问localhost:8008，就可以看到weinre的基本信息。(设置boundHost为-all-，就可以通过IP访问Debug服务端，这点很重要) 上图中的”debug client user interface”是weinre的Debug客户端，点击进入后可以看到目前还没有被测试的目标网页。 如何让网页可以被localhost:8081上的weinre检测到呢？很简单，只要往网页面上添加一个js文件就可以了。如果本机的IP为192.168.23.10，那么就添加如下的js文件。target-script.js可以获得从Debug服务端传来的信息，更改当前页面的样式；也可以运行传来的js，并返回结果。1&lt;script src=http://192.168.23.10:8008/target/target-script.js&gt;&lt;/script&gt; 一般放到head中或者body后都可以 对于dojo这样的异步加载模块，上面的静态嵌入的js就会不兼容，在有dojo等异步加载模块的环境下，请在异步加载全部完成后加载target-script.js 打开添加了这个脚本的网页后，可以看见在Debug 的客户端的里检测到了新的目标页面。 选择要测试的页面后，用手机打开页面，就可以通过PC在Elements和console中进行调试了]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Weinre</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3选择器、低版本解决方案及各浏览器私有前缀]]></title>
    <url>%2FCSS3%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%BD%8E%E7%89%88%E6%9C%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%8F%8A%E5%90%84%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A7%81%E6%9C%89%E5%89%8D%E7%BC%8020141201%2F</url>
    <content type="text"><![CDATA[一、基本选择器 通配选择器：*元素选择器：div、p…ID选择器：#id类选择器：.className群组选择器：选择器1，选择器2 主流浏览器全部支持 二、层次选择器 后代选择器： div p a子选择器：div&gt;p兄弟选择器：p+ul通用选择器：p~a 通用选择器和兄弟选择器 选中的都是同一层次的兄弟选择器 唯一的区别是兄弟选择器选择的是相邻的第一个兄弟，通用选择器选择的是后面所有的兄第 子选择器、兄弟选择器、通用选择器 ： IE7+支持 三、伪类选择器1、动态伪类选择器 E:link 匹配的元素定义了超链接没有被访问过E:visited 匹配元素定义了超链接并被访问过E:hover 鼠标停留在元素E上E:active 匹配的元素被激活E:focus 匹配的元素获得焦点 其中:E:active、E:focus ： IE8+支持，E:hover ： IE6只支持链接锚点a:hover 2、目标伪类选择器 E:target 匹配文档的URL中某个标志符的目标元素 IE9+、Opera 9.6+支持 3、语言伪类选择器 E:lang 匹配设置了lang属性的元素 IE8+、Opera 9.2+支持 4、表单伪类选择器 E:checked 匹配所有选中的表单元素E:enabled 匹配所有可用的表单元素E:disabled 匹配所有禁用的表单元素 IE9+支持 5、结构伪类选择器 E:first-child 匹配父元素的第一个子元素，同E:nth-child(1)E:last-child 匹配父元素的最后一个子元素，同E:nth-last-child(1)E:root 匹配所在文档的根元素E F:nth-child(n) 匹配父元素的第N个子元素E F:nth-last-child(n) 匹配父元素倒数的第N个子元素E F:nth-of-type(n) 匹配父元素内具有指定类型的第n个子元素E F:nth-last-of-type(n) 匹配父元素内具有指定类型的倒数第n个子元素E F:first-of-type 匹配父元素内具有指定类型的第一个子元素E F:last-of-type 匹配父元素内具有指定类型的最后一个子元素 如：div a:last-of-type 父元素div中的最后一个a链接E:only-child 匹配父元素只包含一个子元素E F:only-of-type 匹配父元素只包含一个同类型的子元素E:empty 匹配没有子元素的元素，并且该元素不包含任何的文本节点 IE9+支持 其中的参数n，可以是整数（1、2、3），关键字（odd、even），公式（2n+1）参数n为具体数值时，n始终从1开始计算参数n为公式时，n从0开始计算参数为关键字时，odd选择基数，even选择偶数 6、否定伪类选择器 E:not(F) 匹配所有除元素F外的E元素 IE9+支持 7、伪元素 ::first-letter 用来选择文本块的第一个字母::first-line 用来选择文本块的第一行文本::before 指额外插入内容的位置（之前）::after 指额外插入内容的位置（之后），一般配合content使用::selection 匹配突出显示的文本 IE6～8 只支持单冒号的写法，其他浏览器单双冒号都支持 ::selection ： IE9+，火狐需要增加私有属性“-moz”,另外该伪元素只接受两个属性：background、color 四、属性选择器如：title=“aalink bblink” [attr] 用于选取带有指定属性的元素。 [title]选取所有带title属性的元素[attr=val] 用于选取带有指定属性和值的元素，这个值必须是全部的。 [title=“aalink bblink”][attr~=val] 用于选取属性值中包含指定词汇的元素。这个词汇必须是完整的单词 [title~=”aalink”]选取属性中有aalink单词的具有title属性的元素[attribute|=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。 [title|=”aa”]选取所有以aa或者aa-开头的具有title属性的元素[attribute^=value] 匹配属性值以指定值开头的每个元素。 [title^=”aa”]选取所有以aa开头的具有title属性的元素[attribute$=value] 匹配属性值以指定值结尾的每个元素。 [title$=”link”]选取所有以link结尾的具有title属性的元素[attribute=value] 匹配属性值中包含指定值的每个元素。 [title=”aal”]选取属性中有aal字母的具有title属性的元素 IE7+支持 五、IE低版本解决方案1、使用Selectivizr页面中使用123&lt;!--[if (gte IE 6)&amp;(lte IE 8)]&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;selectivizr.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; 2、使用IE7-js下载：https://code.google.com/p/ie7-js/downloads/list页面中使用123&lt;!--[if lt IE 9]&gt;&lt;script src=&quot;http://ie7-js.googlecode.com/svn/version/2.1(beta4)/IE9.js&quot;&gt;IE7_PNG_SUFFIX=&quot;.png&quot;;&lt;/script&gt;&lt;![endif]--&gt; 六、各浏览器私有前缀 Firefox ： -moz-opera ：-o-IE ： -ms-Chrome ： -webkit-]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PIE.htc的使用]]></title>
    <url>%2FPIE-htc%E7%9A%84%E4%BD%BF%E7%94%A820141120%2F</url>
    <content type="text"><![CDATA[文件下载：http://css3pie.com/download/ 使用：12345678910.pie_radius&#123; width:200px; height:200px; background-color:red; -moz-border-radius:8px; -webkit-border-radius:8px; border-radius:8px; position:relative; behavior: url(PIE.htc);&#125; HTML:1&lt;div class=&quot;pie_radius&quot;&gt;&lt;/div&gt; 下载下来时会有5个文件，一般只用PIE.htc就可以，样式表中引入的PIE.htc是相对于项目的根目录而言的，不是样式表的相对路径]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AvalonJS学习笔记1]]></title>
    <url>%2FAvalonJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0120141119%2F</url>
    <content type="text"><![CDATA[一、关于AvalonJSavalon是国内的一个MVVM框架，是从knockout发展起来的 分为两个版本 avalon.js版本，支持IE6及非常老的标准浏览器。这里的标准浏览器特指W3C阵营中的safari, opera, firefox, chrome avalon.modern.js版本，兼容IE10与标准浏览器 如果想做移动端开发，有一个mobile.js，可以直接将它的源码 拷贝到avalon.modern.js里最后一个花括号的前面 二、获得源码项目地址：https://github.com/RubyLouvre/avalon如何从github获取源码请查看：http://limodou.github.io/avalon-learning/zh_CN/installation.html 源码下载后的目录如图： .min.js是压缩版 examples文件夹里面是例子，里面有index.html，可以跳转到各个实例页面，对于学习avalonJs事半功倍 三、又见 hello,world1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt; &lt;script src="js/avalon.js" &gt;&lt;/script&gt; &lt;script&gt; var model = avalon.define('test', function(vm) &#123; vm.aaa = "world" &#125;) &lt;/script&gt; &lt;/head&gt; &lt;body ms-controller="test"&gt; &lt;p&gt;hello,&#123;&#123;aaa&#125;&#125;&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 在浏览器打开这个文件，结果是 Hello,world 1&lt;body ms-controller=&quot;test&quot;&gt; 中的 ms-controller，用来声明avalon的控制域。类似于angularjs中的 ng-controller。一个HTML文件中可以定义多个 ms-controller avalon使用 ms- 开头的属性。所以只要涉及到Avalon动态处理功能的，都要注意定义ms- 开头的属性。目前，Avalon并不存在以 ms- 开头的 TAG，所以全部都是属性。 123&lt;p&gt;hello,&#123;&#123;aaa&#125;&#125;&lt;/p&gt;也与angularjs的语法一样，使用&#123;&#123;&#125;&#125;进行插值，为动态变化的模板变量 一个控制域与一个Model相对应，当Model中的数据发生变化，与之对应的控制域的DOM会自 动进行变化。123456var model = avalon.define(&apos;test&apos;, function(vm) &#123; vm.aaa = &quot;world&quot; &#125;)第一个参数是和前面 ms-controller 对应的名字。这里是 test第二个是一个函数，这个函数需要一个参数，名字可以随便起，但是习惯上使用 vm (在 Avalon中表示是 ViewModel 的意思)。 vm 可以理解为Model的引用。vm.aaa = &quot;world&quot;，在VM上定义了一个aaa属性，和&#123;&#123;aaa&#125;&#125;对应 四、绑定先看下avalonJs的所有绑定o_msbindings 1、上面已经说了作用域绑定：12ms-controller（继承）ms-important（组合），作用域的绑定可以嵌套 2、模板绑定：ms-include想在模板加载后，加工一下模板，可以使用1data-include-loaded来指定回调的名字 想在模板扫描后，隐藏loading什么的，可以使用1data-include-rendered来指定回调的名字 外部模板通过 ms-include-src 进行加载1&lt;div ms-include-src=&quot;&apos;tmpl.html&apos;&quot;&gt;&lt;/div&gt;（需要后端服务器支持） 要用两种引号强制让它的内部不是一个变量 3、数据绑定：123ms-textms-html&#123;&#123;&#125;&#125; 1234567891011121314151617181920&lt;script&gt;avalon.define(&quot;test&quot;, function(vm) &#123;vm.text = &quot;&lt;b&gt; 1111 &lt;/b&gt;&quot;&#125;)&lt;/script&gt;&lt;div ms-controller=&quot;test&quot;&gt;&lt;div&gt;&lt;em&gt;用于测试是否被测除&lt;/em&gt;xxxx&#123;&#123;text&#125;&#125;yyyy&lt;/div&gt;&lt;div&gt;&lt;em&gt;用于测试是否被测除&lt;/em&gt;xxxx&#123;&#123;text|html&#125;&#125;yyyy&lt;/div&gt;&lt;div ms-text=&quot;text&quot;&gt;&lt;em&gt;用于测试是否被测除&lt;/em&gt;xxxx yyyy&lt;/div&gt;&lt;div ms-html=&quot;text&quot;&gt;&lt;em&gt;用于测试是否被测除&lt;/em&gt;xxxx yyyy&lt;/div&gt;&lt;/div&gt; 结果：1o_ms-text-html 4、类名切换与样式绑定：1234ms-classms-hoverms-activems-css ms-css的用法为ms-css-样式名=”样式值”如：123456789101112131415ms-css-width=&quot;prop&quot;(会自动补px)，ms-css-height=&quot;&#123;&#123;prop&#125;&#125;%&quot;,ms-css-color=&quot;prop&quot;,ms-css-background-color=&quot;prop&quot;,ms-css-font-size=&quot;&#123;&#123;prop&#125;&#125;px&quot;。ms-class=&quot;aaa&quot;， xxx为类名ms-hover=&quot;类名&quot;，规则同ms-class， 当用户的鼠标悬浮在元素上方时，添加一个或多个类名，移走时移除它们。ms-active=&quot;类名&quot;，规则同ms-class，当用户点击它时为它添加一个类名或多个类名，鼠标弹起时移除它们。 5、事件绑定：12345678910111213141516171819ms-onms-clickms-dblclickms-mouseoutms-mouseoverms-mousemovems-mouseenterms-mouseleavems-mouseupms-mousedownms-keypressms-keyupms-keydownms-focusms-blurms-changems-scrollms-animationms-on-* 1234567891011121314151617181920212223&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;有关事件回调传参&lt;/title&gt; &lt;script src="js/avalon.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script&gt; var a = avalon.define("simple", function(vm) &#123; vm.array = ["aaa", "bbb", "ccc"] vm.loopClick = function(a) &#123; alert(a) &#125; &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;fieldset ms-controller="simple"&gt; &lt;div ms-each-el="array" &gt; &lt;p ms-click="loopClick(el)"&gt;&#123;&#123;el&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/body&gt;&lt;/html&gt; 6、显示绑定： ms-visible1234567891011121314151617181920212223242526&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;ms-visible&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt; &lt;script src="../avalon.js" &gt;&lt;/script&gt; &lt;script&gt; var model = avalon.define("test", function(vm) &#123; vm.a = true &#125;) &lt;/script&gt; &lt;style&gt; .rect&#123; display: none; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;ms-visible&lt;/h3&gt; &lt;div ms-controller="test"&gt; &lt;p&gt;点我隐藏或显示下面的方块&lt;input ms-duplex="a" type="radio"&gt;&lt;/p&gt; &lt;div class="rect" ms-visible="a" &gt;visible&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>AvalonJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>AvalonJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用git命令]]></title>
    <url>%2F%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A420141118%2F</url>
    <content type="text"><![CDATA[初始化配置 （–global）参数表示计算机上的所有git仓库都使用这个配置12$ git config --global user.name “Your Name”$ git config --global user.email “email@example.com” 创建目录1$ mkdir &lt;目录名&gt; 查看当前目录1$ pwd 初始化git仓库1$ git init //把当前目录变为git仓库 克隆源码到本地1$ git clone git://github.com/RubyLouvre/avalon.git 添加文件到暂存区1$ git add &lt;file&gt; //添加文件到暂存区，可多次添加 提交文件1$ git commit -m “注释” //提交暂存区文件到仓库 查看状态1$ git status 查看文件1$ git diff &lt;file&gt; 查看日志12$ git log [ -- pretty=oneline ] //查看日志$ git reflog //查看版本库操作记录 回退版本12$ git reset -- hard HEAD^//HEAD表示当前版本，上一个版本就是HEAD^，上上版本是HEAD^^回退版本比较多时写成HEAD~100 撤销修改12$ git checkout -- &lt;file&gt; //丢弃工作区的修改，恢复为版本库最新版本$ git reset hard &lt;file&gt; //撤销暂存区的修改到最新版本 删除1$ git rm &lt;file&gt; //从版本库中删除该文件，删除后要提交commit 查看有哪些远程库1$ git remote 关联本地库和远程库1$ git remote add &lt;远程库名&gt; &lt;远程库URL&gt; 推到远程仓库1$ git push &lt;远程库名&gt; &lt;分支名&gt; 从远程库克隆到本地库1$ git clone &lt;远程库URL&gt; 创建和切换分支12345$ git checkout -b &lt;分支名&gt; //创建并切换到新分支$ git branch &lt;分支名&gt; //只创建一个分支，不切换$ git checkout &lt;分支名&gt; //切换到某个分支 查看分支123$ git branch //查看本地分支$ git branch -r //查看远程分支 分支合并123$ git merge &lt;要合并的分支名&gt; //合并后会丢掉分支信息$ git merge --no-ff -m “描述” &lt;分支名&gt; //能看到合并历史 删除分支1$ git branch -d &lt;分支名&gt; 查看分支合并图1$ git log --graph 储藏1234567891011$ git stash //存储数据$ git stash lish //查看之前的存储$ git stash apply //恢复$ git stash drop //删除存储$ git stash pop //恢复并删除存储$ git stash clear //清除队列 打标签1234567891011$ git tag &lt;标签名或版本号&gt; [&lt;历史的commit id&gt;]$ git tag //查看所有标签$ git show &lt;标签名&gt; //查看标签信息$ git tag -d &lt;标签名&gt; //删除本地标签$ git push &lt;远程库origin&gt; &lt;标签名&gt; //推送某标签$ git push &lt;远程库origin&gt; --tags //推送所有标签 另外除了使用命令行外,还可以使用图形化工具,如:SourceTree]]></content>
      <categories>
        <category>其他技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compass用法]]></title>
    <url>%2FCompass%E7%94%A8%E6%B3%9520141118%2F</url>
    <content type="text"><![CDATA[一、什么是Compass？Compass是Sass的工具库,Compass在SASS的基础上，封装了一系列有用的模块去补充Sass的功能，类似Javascript和jQuery 二、安装之前已经写过文章讲了sass、compass的安装，地址 三、创建项目在Ruby的命令行中输入1$ compass create myproject 会在当前目录下创建一个myproject的目录，myproject也可以是一个路径参数上面是创建的目录结构，下面是告诉你在html中的引用 config.rb是配置文件上面的是css、sass、image、js的存放目录 最后是使用sass语法缩进 可以通过修改该文件进行项目配置，也可以在使用用compass create命令时进行配置： –bare （不包含默认样式表进行安装）；–syntax sass （在默认样式表中使用缩进语法）；–sass-dir “cool” （使用’cool’目录存放Sass文件）；–css-dir “style” （使用’style’目录存放CSS文件）；–images-dir “img” （使用’img’目录存放图片）；–fonts-dir “type” （使用’type’目录存放字体文件）；–javascripts-dir “js” （使用’js’目录存放JavaScript文件）。 如：compass create myproject –sass-dir “cool” –css-dir “style” 四、项目编译编译命令：1$ compass compile 该命令在项目根目录下运行，会将sass子目录中的scss文件，编译成css文件，保存在config.rb配置的css-dir对应的目录中。 默认状态下，编译出来的css文件带有大量的注释。但是，生产环境需要压缩后的css文件，这时要使用–output-style参数。1$ compass compile --output-style compressed Compass只编译发生变动的文件，如果你要重新编译未变动的文件，需要使用–force参数1$ compass compile –force 每次都要进行编译太麻烦，可以自动检测，只要sass文件夹发生变化(修改、增加文件)，scss文件就会被自动编译成css文件。1compass watch 一些其他的命令 compass init——为一个已经存在的项目（Rails）添加compass；compass clean——移除生成的文件和缓存；compass stats——查看样式表的统计数据；compass unpack ——解压扩展到你的项目；compass validate——验证你生成的CSS文件；compass version——显示版本、许可证，等等；compass interactive——进入一个用于测试Compass中SassScript的控制台。compass help &lt;具体命令&gt;——获得帮助/具体命令的详细描述 五、Compass模块Compass采用模块结构，不同模块提供不同的功能1、reset1@import &quot;compass/reset&quot;; //reset模块，重置浏览器的默认样式 有时不需要进行全局的样式重置，可以单独重置某一块123456reset-html5 //HTML5样式重置reset-box-model //移除元素的内外边距和边框reset-font //重置文字的字号和基线reset-focus //移除浏览器提供的轮廓线（比如Safari给&lt;input&gt;元素加上的那一圈线）reset-table 和 reset-table-cell //重置表格的边框和对齐方式reset-quotation //为&lt;blockquotes&gt;添加仅存在于样式表中的双引号 用法：123@import &quot;compass/reset/utilities&quot;;@include reset-html5; 2、layout1@import &quot;compass/layout&quot;； 如：1@include sticky-footer(54px); //页脚54px高，始终位于页面底部 3、CSS3提供CSS3命令，常用的如圆角等1@import &quot;compass/css3&quot;; 使用时：1@include border-radius(5px); 4、typography该模块提供版式功能1@import &quot;compass/typography&quot;; 如：链接颜色1link-colors($normal, $hover, $active, $visited, $focus) 5、utilities提供某些不属于其他模块的功能，如reset中引入的混合器就包含在utilities中1@import &quot;compass/utilities/&quot;; 如：清除浮动1@include clearfix; 六、Helper函数Compass还提供一系列函数，如：1image-width($image)、cos($number) 有关compass的所有相关模块和函数，可以查看里面有详细的用法讲解和例子]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>sass</tag>
        <tag>compass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass和Compass的安装.md]]></title>
    <url>%2FSass%E5%92%8CCompass%E7%9A%84%E5%AE%89%E8%A3%8520141118%2F</url>
    <content type="text"><![CDATA[Sass和Compass都是基于Ruby编程语言的命令行工具。要使用它们，你首先需要在电脑中安装Ruby，并对电脑的命令行操作有一个基本的理解。Sass和Compass可以安装在Windows、Mac OSX和Linux系统中。 一、在Windows系统中安装Windows系统并没有预置，因此如果你之前没有安装过Ruby，现在就需要进行安装 1.打开命令行工具（cmd），输入1$ ruby -v 如果没有安装Ruby 命令行将显示1&apos;ruby&apos; is not recognized as an internal or external command, operable program or batch file 如果电脑中已经安装了Ruby，那么将打印出已经安装好的Ruby版本号 2.进入网址http://rubyinstaller.org/downloads/，下载最新版本的Ruby安装程序并运行在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境 第三个选项也可以选择，是把.rb和.rbw结尾的文件与ruby关联 3.重新启动命令行窗口,然后输入1$ ruby -v 并按下回车键来确认Ruby已经安装完成 二、在Windows系统中安装Sass和CompassRuby自带一个叫做RubyGems的系统，用来安装基于Ruby的软件。 安装完ruby之后，在开始菜单中，找到刚才我们安装的ruby，打开Start Command Prompt with Ruby，然后直接在命令行中输入1$ gem install sass 安装完成后，可以用sass -v查看sass版本 再输入如下命令安装compass1gem install compass 安装完成后，可以用compass -v查看compass版本 三、在Mac和Linux中安装Sass和Compass在Mac一般自带有RubyLinux中使用Linux发布版本的软件安装机制来安装Ruby 安装好Ruby后，输入命令12sudo gem install sasssudo gem install compass 完成Sass和Compass的安装]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>compass</tag>
      </tags>
  </entry>
</search>
